import Taro, { getCurrentPages, uploadFile } from '@tarojs/taro'
import type { Method, RequestBody, RequestQuery } from './a2s.request'
import { createServices } from './a2s.service'

export interface CommonResponse<T = unknown> {
  data: T
  err_code: string
  err_message: string
  message: string
}

let token = Taro.getStorageSync('token')
const services = createServices(
  async (
    url: string,
    method: Method,
    query: RequestQuery,
    body: RequestBody,
    extraParams,
    done = true
  ) => {
    try {
      const res = await Taro.request({
        url: done ? url : 'https://mock.your.api.com/v1',
        method: method,
        timeout: 120000,
        dataType: 'json',
        data: method === 'GET' ? query : body,
        header: {
          ContentType: 'application/json',
          ...(token ? { Authorization: `Bearer ${token}` } : {} )
        }
      })
      return statusHandler(res)
    } catch (error) {
      console.error(error)
      Taro.showToast({ content: '检测到网络信号弱，请重试' })
      return {
        data: null,
        error: true,
        message: 'request failed'
      }
    }
  }
)
export default services

let isRedirectToLoginFlag = false

// 不同的service状态的处理函数
function statusHandler(res: Taro.request.SuccessCallbackResult<CommonResponse>) {
  const { data, statusCode, errMsg } = res
  if (statusCode >= 200 && statusCode < 300) {
    return {
      data,
      error: false,
      message: errMsg
    }
  } else if (statusCode === 401) {
    Taro.removeStorage('token')
    token = null
    const page = getCurrentPages()[0]
    if (
      // path是h5的属性
      !(page?.route || page?.path).includes('login/index') &&
      !isRedirectToLoginFlag
    ) {
      isRedirectToLoginFlag = true
      Taro.redirectTo({
        url: '/pages/login/index'
      }).then(() => (isRedirectToLoginFlag = false))
    }
    return { data: null, error: false, message: '' }
  } else {
    Taro.showToast({ content: data?.message || errMsg })
    return {
      data: null,
      error: true,
      message: errMsg
    }
  }
}

/**
 * 小程序文件上传
 * @param filePath 文件路径
 * @returns 上传的文件路径
 */
export async function upload(filePath: string) {
  return uploadFile({
    filePath,
    url: '/api/upload',
    name: 'file',
    formData: {
      type: 'oss'
    },
    header: {
      authorization: `Bearer ${token}`
    }
  }).then(res => {
    let json: CommonResponse<{ url: string }>
    try {
      json = JSON.parse(res.data)
    } catch (error) {
      throw new Error(res.errMsg)
    }
    if (res.statusCode >= 200 && res.statusCode < 300) {
      // TODO 改为业务真实结构
      return json.data.url
    } else {
      throw new Error(json.message)
    }
  })
}
