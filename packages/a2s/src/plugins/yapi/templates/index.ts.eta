/* eslint-disable */
import { requestAdapter } from './a2s.adapter'
import type { RequestBody, RequestQuery } from './a2s.types'

/**
 * 将参数拆分为 query 和 body
 */
function extract(args: RequestBody | unknown, queryList: string[], paramList: string[]) {
  if (args && typeof args === 'object') {
    const query: RequestQuery = {}
    const body: RequestBody = {}
    Object.keys(args).forEach(key => {
      if (queryList.includes(key)) {
        query[key] = (args as RequestBody)[key] as RequestQuery
      } else if (!paramList.includes(key)) {
        body[key] = (args as RequestBody)[key]
      }
    })
    return { query, body }
  }
  return { query: {}, body: {} } 
}

/**
 * 路径参数插值
 */
function replacePath(path: string, pathValueMap?: unknown) {
  return path
    .replace(/\/\{(\w+)}\//g, (_, str) => {
      return `${(pathValueMap as Record<string, string | number>)[str]}`
    })
    .replace(/\/:(\w+)\//g, (_, str) => {
      return `${(pathValueMap as Record<string, string | number>)[str]}`
    })
}

<% var keyList = []%>
export const services = {
  <% it.apis.forEach(group => {%> 
    <% group.list.forEach(item => {%>
    <% /* 计算api的值 */ %>
    <% var key = it.trimKey(group.name + '@' + item.title)%>
    <% /* api的key有冲突 */ %>
    <% if(keyList.includes(key)) {%>
      <% it.addWarnMessages(`\x1B[33m检测到重复api key: [${key}]，后续接口替换为 group.name@item.method@item.path 格式。\x1B[0m`)%>
      <% key = it.trimKey(group.name + '@' + item.method.toLowerCase() + '@' + item.path)%>
    <% } else { %>
      <% keyList.push(key)%>
    <% } %>
      '<%= key %>'(<%~ include('yapi.args',item)%>){
        return requestAdapter<<%~ include('schema.any', item.res_body) %>>({
          "url": replacePath('<%= item.query_path.path%>',args),
          "method": '<%= item.method%>',
          ...extract(args,[<% item.req_query.forEach(q => {%>
            '<%= q.name%>',
          <% }) %>],[<% item.req_params.forEach(p => {%>
            '<%= p.name%>',
            <% }) %>])
        })
      },
    <% }) %>
  <% })%>
}
