/* eslint-disable */
import { requestAdapter } from './a2s.adapter'
import type { RequestBody, RequestQuery } from './a2s.types'
import type { ApiDocuments } from './a2s.namespace'

/**
 * 将参数拆分为 query 和 body
 */
function extract(args: RequestBody | unknown, queryList: string[], paramList: string[]) {
  if (args && typeof args === 'object') {
    const query: RequestQuery = {}
    const body: RequestBody = {}
    Object.keys(args).forEach(key => {
      if (queryList.includes(key)) {
        query[key] = (args as RequestBody)[key] as RequestQuery
      } else if (!paramList.includes(key)) {
        body[key] = (args as RequestBody)[key]
      }
    })
    return { query, body }
  }
  return { query: {}, body: {} } 
}

/**
 * 路径参数插值
 */
function replacePath(path: string, pathValueMap?: unknown) {
  return path
    .replace(/\/\{(\w+)}\//g, (_, str) => {
      return `${(pathValueMap as Record<string, string | number>)[str]}`
    })
    .replace(/\/:(\w+)\//g, (_, str) => {
      return `${(pathValueMap as Record<string, string | number>)[str]}`
    })
}

<% var keyList = [] %>
export const services = {
  <% Object.keys(it.paths || {}).forEach(path => { %>
    <% var pathGroup = it.paths[path] %>
    <% Object.keys(pathGroup || {}).forEach(method => { %>
      <% var api = pathGroup[method] %>
      <% var { queryList, paramList } = it.extractParameters(api.parameters) %>
      <% /* 计算api的key */ %>
      <% var group = api.tags ? api.tags[0] : 'default' %>
      <% var key = it.trimKey(group + '@' + (api.summary || path)) %>
      <% /* api的key有冲突 */ %>
      <% if (keyList.includes(key)) { %>
        <% it.addWarnMessages(`\x1B[33m检测到重复api key: [${key}]，后续接口替换为 group@method@path 格式。\x1B[0m`) %>
        <% key = it.trimKey(group + '@' + method.toLowerCase() + '@' + path) %>
      <% } else { %>
        <% keyList.push(key) %>
      <% } %>
      '<%= key %>'(<%~ include('openapi.args', { queryList: queryList, paramList: paramList, requestBody: api.requestBody }) %>) {
        return requestAdapter<<%~ include('openapi.resp', { responses: api.responses }) %>>({
          url: replacePath('<%= path %>', args),
          method: '<%= method.toUpperCase() %>',
          ...extract(args, [<% queryList.forEach(q => {%>
          '<%=q.name%>',
          <% }) %>], [<% paramList.forEach(p => {%>
          '<%=p.name%>',
          <% }) %>])
        })
      },
    <% }) %>
  <% }) %>
}
